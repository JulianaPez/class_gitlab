{
  "hash": "e451713bd42573f8d8b32b53d1e233f0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Trabajo Colaborativo\"\nauthor: \"Luis\"\nformat: \n  live-revealjs:\n    theme: simple\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## Pull Request\n\n> request for the maintainer to pull your changes into their repo\n\n## Desarrollando en comunidad (GitHub)\n\n. . .\n\n### Necesitamos\n\n::: incremental\n-   Nuestra propia copia del repositorio (en la nube)\n-   Copia local del repositorio (nuestra máquina)\n-   Poder seguir los cambios en el repositorio (ajeno) de interés \n:::\n\n## \n\n![Happy git with R - Fork and clone](https://happygitwithr.com/img/fork-them-pull-request.jpeg)\n\n## \n\n![How to Sync Forked Repositories Using Git or Github <br/> Soham Biswas](https://miro.medium.com/v2/resize:fit:786/format:webp/1*IelAxduwS_YtpsrlRe1d0Q.png)\n\n## GitHub en el navegador\n\nPodemos crear nuestras propias copias (forks) de un repositorio, editar en la web, y crear PRs con nuestros cambios.\n\n> Demo: Luiss a correjir ortografia en esta diapozitiba \n\n## git cli\n\n![git cheat sheet - Julia Evans](https://cdn.masto.host/socialjvnsca/media_attachments/files/112/288/026/870/908/533/original/8cdf198fa52700f6.png)\n\n## `usethis`\n\nFunciones de R para facilitar tareas de desarrollo/git\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_from_github(\"usuario/repositorio\")\n```\n:::\n\n\n\nHace 'fork', 'clone', y configura la comunicación entre el repositorio remoto y el nuestro\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::pr_init(\"mi_cambio\")\n```\n:::\n\n\n\nCrea una rama para trabajar\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::pr_push()\nusethis::pr_finish()\n```\n:::\n\n\n\nGenera el PR en GitHub y nos ayuda a finalizarlo\n\n## ramas\n\n::::: columns\n::: {.column width=\"50%\"}\n![Mastering Git Branches - Pankaj Kholiya](https://miro.medium.com/v2/1*K9scAx1Ezd-KJFabaYseCw.jpeg)\n:::\n\n::: {.column width=\"50%\"}\n-   Espacios de trabajo aislados para trabajar/experimentar sin afectar (romper) el proyecto principal.\n-   Versiones paralelas del proyecto, c/u con su propio historial de cambios\n-   Se pueden descartar o fusionar con el proyecto principal\n:::\n:::::\n\n## git push\n\nEnviar los cambios locales a nuestro fork en GitHub\n\n- En la línea de comandos o con la flecha azul de RStudio\n\n> Siempre hacer pull antes para evitar conflictos\n\n\n## issues\n\n### \"asuntos\" sobre el contenido de un repositorio\n\n-   recordatorios para quien esté a cargo\n-   errores o bugs\n-   sugerencias de funcionalidad\n\n## issues - práctica\n\n\n\n::: {.cell}\n```{webr}\nsample(c(\"Gera\",\"Mons\",\"Kevin\",\"Diana\",\"Robert\"),2)\n```\n:::\n\n\n\n-   \\[1\\]\\* abre un issue sobre el contenido de `codigo-ej/visscript.R`\n-   \\[2\\]\\* abre un pull request arreglando el problema\n\n\n\n\n::: {.cell}\n```{webr}\npara_equipos <- c(\"Gera\",\"Mons\",\"Kevin\",\"Juli\",\"Diana\",\"Robert\",\"Fabricio\")\nsample(para_equipos,floor(length(para_equipos)/2))\n```\n:::\n\n\n\n## PRs - Individual\n\nAbrir un PR en el archivo `maevo2025.qmd` y agregar una diapositiva con su nombre, enlace perfil de Git-hub y la imagen de algún animal que les guste (ver el ejemplo de Luis)\n\n- trabajar con ramas\n- cuando se integre su cambio, correr `usethis::pr_finish()`\n\n\n> Si terminaron rápido, mandar un PR modificando la apariencia de la presentación\n\n# Fin\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}